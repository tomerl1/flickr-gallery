{"version":3,"sources":["webpack:///webpack/bootstrap 9b68d9d7944424a51964","webpack:///./app/js/modules/progrss-bar.js","webpack:///./app/main.js","webpack:///./app/js/modules/flickr-gallery.js","webpack:///./app/js/modules/point.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","[object Object]","selector","Error","this","elRoot","document","querySelector","elValue","createElement","className","style","transform","appendChild","percent","percentValue","updateUI","display","setTimeout","flickr","__WEBPACK_IMPORTED_MODULE_1__js_modules_flickr_gallery__","progressBar","__WEBPACK_IMPORTED_MODULE_2__js_modules_progrss_bar__","addEventListener","e","setValue","detail","reset","console","log","feedUrl","jsonFlickrFeed","data","setData","arrImages","history","window","displayImages","bind","handleHashChange","registerFlickrCallback","createFeedRequest","detectTouchDevice","hasTouch","createEvent","classList","add","authorId","location","hash","substr","length","saveState","loadFromState","push","JSON","parse","stringify","prevValue","pop","self","original","apply","arguments","params","script","src","body","event","CustomEvent","dispatchEvent","removeChild","undefined","preloadImages","items","preload","count","current","Math","round","isDone","forEach","element","preloadImage","image","url","media","img","Image","dataset","onload","size","flickrData","dateTaken","Date","date_taken","formattedDate","getDate","toString","padStart","getMonth","getFullYear","author","replace","height","width","title","link","author_id","innerHTML","images","offsetWidth","totalWidth","widths","currentWidth","getSize","y","x","floor","rowsCount","ceil","perRowWidth","rows","generateRows","rowNum","row","availableRowWidth","ratio","imageCount","rowHeight","min","domRow","createDomRow","imagesHtml","rowWidth","generateImagesHtml","writeImagesHtml","adjustToFill","imagesCount","baseLine","border","j","ratioWidth","getImageHtml","join","html","isEmpty","parentElement","imageContainer","__WEBPACK_IMPORTED_MODULE_0__point__","naturalWidth","naturalHeight"],"mappings":"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","file":"main.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 9b68d9d7944424a51964","\r\n/* \r\n    A simple progress bar. \r\n    You can use this code for anything!\r\n*/\r\nclass ProgressBar {\r\n    constructor(selector) {\r\n\r\n        if (!selector) {\r\n            throw new Error('This doesn\\'t work with an empty selector...');\r\n        }\r\n\r\n        this.elRoot = document.querySelector(selector);\r\n\r\n        // creates an inner DOM element\r\n        this.elValue = document.createElement('div');\r\n        this.elValue.className = 'progressbar-value';\r\n        this.elValue.style.transform = `translate(-100%, 0)`;\r\n        this.elRoot.appendChild(this.elValue);\r\n        this.percent = 0;\r\n    }\r\n\r\n    /* \r\n        Sets the value for the progress bar.\r\n        The value is expected to be a percentage of the progress.\r\n    */\r\n    setValue(percentValue) {\r\n        this.percent = percentValue;\r\n        this.updateUI();\r\n    }\r\n\r\n    /* \r\n        Updates the UI of the progress bar.\r\n    */\r\n    updateUI() {\r\n        this.elValue.style.transform = `translate(${this.percent - 100}%, 0)`;\r\n    }\r\n\r\n    /* \r\n        Resets the progress bar and enable a \"fresh start\".\r\n    */\r\n    reset() {\r\n        this.elValue.style.display = \"none\";\r\n\r\n        setTimeout(() => {\r\n            this.percent = 0;\r\n            this.updateUI();\r\n            this.elValue.style.display = \"block\";\r\n        }, 5);\r\n    }\r\n}\r\n\r\nexport default ProgressBar;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./app/js/modules/progrss-bar.js\n// module id = 1\n// module chunks = 0","\r\nimport \"./scss/main.scss\";\r\nimport FlickrGallery from \"./js/modules/flickr-gallery\";\r\nimport ProgressBar from './js/modules/progrss-bar';\r\nimport progrssBar from \"./js/modules/progrss-bar\";\r\n\r\nconst flickr = new FlickrGallery('.flickr-gallery');\r\nconst progressBar = new ProgressBar('.progressbar');\r\n\r\nflickr.elRoot.addEventListener('update-progress', function (e) {\r\n    progressBar.setValue(e.detail);\r\n});\r\n\r\nflickr.elRoot.addEventListener('reset-progress', function (e) {\r\n    progressBar.reset();\r\n});\r\n\r\nconsole.log('main.js loaded.');\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./app/main.js\n// module id = 3\n// module chunks = 0","import Point from \"./point\";\r\n\r\nconst feedUrl = 'https://api.flickr.com/services/feeds/photos_public.gne?format=json';\r\n\r\n/* \r\n    This function is used as the callback for flickrs photos_public feed.\r\n*/\r\nfunction jsonFlickrFeed(data) {\r\n    this.setData(data);\r\n}\r\n\r\n/* \r\n    An awesome Flickr Gallery that pulls the data from Flickrs photos_public feed.\r\n*/\r\nclass FlickrGallery {\r\n    constructor(selector) {\r\n        if (!selector) {\r\n            throw new Error('The selector can not be empty');\r\n        }\r\n\r\n        // init required properties\r\n        this.elRoot = document.querySelector(selector);\r\n        this.arrImages = [];\r\n        this.history = [];\r\n\r\n        // attach some events to the window\r\n        window.addEventListener('resize', this.displayImages.bind(this));\r\n        window.addEventListener('hashchange', this.handleHashChange.bind(this));\r\n\r\n        // load flickr feed data\r\n        this.registerFlickrCallback();\r\n        this.createFeedRequest();\r\n        this.detectTouchDevice();\r\n    }\r\n\r\n    /* \r\n        Try to detect if the browser is 'touch-enabled'.\r\n        If it has touch then add the relevant class.\r\n        Currently the 'touch' class will disable the 'hover' animations (It's still very pretty!). \r\n    */\r\n    detectTouchDevice() {\r\n        let hasTouch = true;\r\n\r\n        // this function only works on the first load (when the document object is created)\r\n        try {\r\n            document.createEvent(\"TouchEvent\");\r\n        } catch (e) {\r\n            hasTouch = false;\r\n        }\r\n\r\n        // console.log('hasTouch', hasTouch);\r\n        if (hasTouch) {\r\n            this.elRoot.classList.add('touch');\r\n        }\r\n    }\r\n\r\n    /* \r\n        Handles location.hash changes.\r\n        If a hash value is found it is passed as the author_id parameter to Flickr photos_public feed.\r\n    */\r\n    handleHashChange() {\r\n        const authorId = window.location.hash.substr(1);\r\n        if (authorId && authorId.length > 0) {\r\n            // save the history!\r\n            this.saveState();\r\n            this.createFeedRequest(`&id=${authorId}`);\r\n        }\r\n        else {\r\n            // mostly like a back button..\r\n            this.loadFromState();\r\n        }\r\n    }\r\n\r\n    /* \r\n        Saves the current state of the gallery so that we can pull it back later if we need to go back.\r\n    */\r\n    saveState() {\r\n        this.history.push({\r\n            data: JSON.parse(JSON.stringify(this.data))\r\n        });\r\n    }\r\n\r\n    /* \r\n        Pops the previous state of the gallery from the history queue and then loads again to the UI.\r\n    */\r\n    loadFromState() {\r\n        const prevValue = this.history.pop();\r\n        this.setData(prevValue.data);\r\n    }\r\n\r\n    /* \r\n        Attach the callback function to the window\r\n    */\r\n    registerFlickrCallback() {\r\n        const self = this;\r\n\r\n        if (window.jsonFlickrFeed) {\r\n            const original = window.jsonFlickrFeed;\r\n            window.jsonFlickrFeed = function () {\r\n                original.apply(window, arguments);\r\n                jsonFlickrFeed.apply(self, arguments);\r\n            }\r\n        }\r\n        else {\r\n            window.jsonFlickrFeed = function (data) {\r\n                jsonFlickrFeed.apply(self, arguments);\r\n            }\r\n        }\r\n    }\r\n\r\n    /* \r\n        Creates a script tag that will trigger a call to Flickrs photo_public feed\r\n    */\r\n    createFeedRequest(params) {\r\n        params = params || '';\r\n        const script = document.createElement('script');\r\n        script.src = feedUrl + params;\r\n        document.body.appendChild(script);\r\n        this.script = script;\r\n\r\n        const event = new CustomEvent('reset-progress');\r\n        this.elRoot.dispatchEvent(event);\r\n    }\r\n\r\n    /* \r\n        Sets new data for the gallery (but only if we have any data).\r\n    */\r\n    setData(data) {\r\n        if (!data) {\r\n            console.log('oops.. no data');\r\n            return;\r\n        }\r\n\r\n        // console.log('got data...', data);\r\n        this.data = data;\r\n        if (this.script) {\r\n            document.body.removeChild(this.script);\r\n            this.script = undefined;\r\n        }\r\n\r\n        this.preloadImages(this.data.items);\r\n    }\r\n\r\n    /* \r\n        Preloads the images for the gallery.\r\n        This makes the user experience much nicer and it also enables the use of a progress bar.\r\n    */\r\n    preloadImages(items) {\r\n        this.arrImages = [];\r\n\r\n        // preload data info\r\n        this.preload = {\r\n            count: items.length,\r\n            current: 0,\r\n            percent: function () {\r\n                return Math.round((this.current / this.count) * 100);\r\n            },\r\n            isDone: function () {\r\n                return this.current === this.count;\r\n            }\r\n        }\r\n\r\n        items.forEach(element => {\r\n            this.preloadImage(element);\r\n        });\r\n    }\r\n\r\n    /* \r\n        Creates an Image object to load the picture into the browsers cache.\r\n        This function triggers and update-progress event to enable the use of progress bars.        \r\n    */\r\n    preloadImage(image) {\r\n        const url = image.media.m;\r\n        const img = new Image();\r\n        this.arrImages.push(img);\r\n        img.dataset['flickr'] = JSON.stringify(image);\r\n\r\n        img.onload = (e) => {\r\n            this.preload.current++;\r\n            const event = new CustomEvent('update-progress', { detail: this.preload.percent() });\r\n            this.elRoot.dispatchEvent(event);\r\n\r\n            if (this.preload.isDone()) {\r\n                // attempt to ensure that all progress bar animations are completed\r\n                // and allow some additional time to end\r\n                setTimeout(() => {\r\n                    this.displayImages();\r\n                }, 50);\r\n            }\r\n        }\r\n\r\n        img.src = url;\r\n    }\r\n\r\n    /*  \r\n        Gets an HTML string for the sepcified image and size.\r\n        The image has to include all relevant dataset values (flickrs data).\r\n    */\r\n    getImageHtml(image, size) {\r\n        const flickrData = JSON.parse(image.dataset['flickr']);\r\n        const dateTaken = new Date(flickrData.date_taken);\r\n        const formattedDate = `${dateTaken.getDate().toString().padStart(2, '0')}-${(dateTaken.getMonth() + 1).toString().padStart(2, '0')}-${dateTaken.getFullYear()}`;\r\n        const author = flickrData.author.replace(/(.*)\"(.*)\"(.*)/, \"$2\");\r\n\r\n        // template literal - the power of ES6!\r\n        return `<div class=\"image-wrapper\" style=\"height:${size.height}px;\">\r\n            <a class=\"gallery-image\" style=\"width:${size.width}px;height:${size.height}px;\" target=\"_blank\" title=\"${flickrData.title}\" href=\"${flickrData.link}\">\r\n                <img src=\"${image.src}\" alt=\"${flickrData.title}\" />\r\n            </a>\r\n            <div class=\"image-author\">\r\n                <div class=\"image-author-inner ellipsis\">\r\n                    by <a href=\"#${flickrData.author_id}\" title=\"@${author} | ${flickrData.title}\" data-author-id=\"${flickrData.author_id}\">${author}</a>\r\n                </div>\r\n            </div>\r\n            <div class=\"image-date\"><span class=\"image-date-inner ellipsis\">${formattedDate}</span></div>\r\n        </div>`;\r\n    }\r\n\r\n    /* \r\n        Render the images to the root element.\r\n    */\r\n    displayImages() {\r\n        // reset!\r\n        this.elRoot.innerHTML = '';\r\n\r\n        const images = this.arrImages;\r\n        const width = this.elRoot.offsetWidth - 40;\r\n        const defaultRowHeight = 200;\r\n        const height = defaultRowHeight; // some default height\r\n        const border = 0;\r\n        const maxRowHeight = 500;\r\n\r\n        let totalWidth = 0;\r\n        let widths = [];\r\n        let currentWidth = 0;\r\n\r\n        // calculate the width of each image\r\n        images.forEach((img, i) => {\r\n            const size = this.getSize(img);\r\n\r\n            // check if the size requries adjusments (most images will require the adjustment)\r\n            if (size.y !== height) {\r\n                // scale the width with the height\r\n                size.x = Math.floor(size.x * (height / size.y));\r\n            }\r\n\r\n            totalWidth += size.x;\r\n            widths.push(size.x);\r\n        });\r\n\r\n        const rowsCount = Math.ceil(totalWidth / width);\r\n        const perRowWidth = totalWidth / rowsCount;\r\n        console.log('rows count', rowsCount);\r\n\r\n        const rows = this.generateRows(images, widths, perRowWidth);\r\n\r\n        let rowNum = 0;\r\n        for (let i = 0; i < rows.length; i++) {\r\n            const row = rows[i];\r\n            const lastRow = i === rows.length - 1;\r\n            let availableRowWidth = width;\r\n\r\n            rowNum = i + 1;\r\n            currentWidth = -1 * border;\r\n\r\n            // Ratio of actual width of row to total width of images to be used.\r\n            let ratio = availableRowWidth / row.width;\r\n            let imageCount = row.images.length;\r\n\r\n            // new height is not original height * ratio\r\n            const rowHeight = Math.min(Math.floor(height * ratio), maxRowHeight);\r\n            ratio = rowHeight / defaultRowHeight;\r\n\r\n            // create and render a new row\r\n            const domRow = this.createDomRow(rowHeight + border);\r\n            this.elRoot.appendChild(domRow);\r\n\r\n            let { imagesHtml, rowWidth } = this.generateImagesHtml(row, ratio, border, currentWidth, rowHeight);\r\n\r\n            if (this.writeImagesHtml(domRow, imagesHtml)) {\r\n                continue; // this row is empty, skip to the next row\r\n            }\r\n\r\n            // try to adjust images widths to fill the full length(width) of the row\r\n            this.adjustToFill(rowWidth, availableRowWidth, domRow, imageCount);\r\n        }\r\n    }\r\n\r\n    /* \r\n        Generates and array of rows.\r\n        Each row holds an array of images to place inside the row and the total width of that row.\r\n        It converts a flat array of images into a matrix of rows and images.\r\n    */\r\n    generateRows(images, widths, perRowWidth) {\r\n        const imagesCount = images.length;\r\n\r\n        let rows = [];\r\n        let totalWidth = 0;\r\n        let baseLine = 0; // used as an \"image index\", we need this because we need to 'unflat' the images array\r\n\r\n        while (baseLine < imagesCount) {\r\n            const row = {\r\n                width: 0,\r\n                images: []\r\n            };\r\n\r\n            let i = 0;\r\n\r\n            while ((totalWidth + widths[baseLine + i] / 2 <= perRowWidth * (rows.length + 1))\r\n                && (baseLine + i < imagesCount)) {\r\n                totalWidth += widths[baseLine + i];\r\n                row.width += widths[baseLine + i];\r\n\r\n                row.images.push({\r\n                    width: widths[baseLine + i],\r\n                    image: images[baseLine + i]\r\n                });\r\n\r\n                i++;\r\n            }\r\n\r\n            baseLine += i;\r\n            rows.push(row);\r\n        }\r\n\r\n        return rows;\r\n    }\r\n\r\n    /* \r\n        Generates the HTML for the given row\r\n    */\r\n    generateImagesHtml(row, ratio, border, currentWidth, rowHeight) {\r\n        let imagesHtml = [];\r\n\r\n        for (let j = 0; j < row.images.length; j++) {\r\n            var image = row.images[j].image;\r\n\r\n            // calculate new width based on ratio\r\n            var ratioWidth = Math.floor(row.images[j].width * ratio);\r\n            currentWidth += ratioWidth + border;\r\n\r\n            imagesHtml.push(this.getImageHtml(image, {\r\n                width: ratioWidth,\r\n                height: rowHeight\r\n            }));\r\n        }\r\n\r\n        return { imagesHtml: imagesHtml.join(''), rowWidth: currentWidth };\r\n    }\r\n\r\n    /* \r\n        Creates a new row dom element.\r\n    */\r\n    createDomRow(height) {\r\n        const domRow = document.createElement(\"div\");\r\n        domRow.className = \"gallery-row\";\r\n        domRow.style.height = height + 'px';\r\n        return domRow;\r\n    }\r\n\r\n    /* \r\n        Write the given HTML into the specified row.\r\n        Returns true it the HTML is empty, otherwise returns false.\r\n    */\r\n    writeImagesHtml(domRow, html) {\r\n        let isEmpty = false;\r\n\r\n        // remove empty rows...\r\n        if (html === '') {\r\n            domRow.parentElement.removeChild(domRow);\r\n            isEmpty = true;\r\n        }\r\n\r\n        // add the html for the images\r\n        domRow.innerHTML = html;\r\n        return isEmpty;\r\n    }\r\n\r\n    /* \r\n        Adjust the width the of the given images to the specified width the the row\r\n    */\r\n    adjustToFill(currentWidth, availableRowWidth, domRow, imageCount) {\r\n        let i = 0;\r\n        while (currentWidth < availableRowWidth) {\r\n            const imageContainer = domRow.querySelector('.image-wrapper:nth-child(' + (i + 1) + ') .gallery-image');\r\n            imageContainer.style.width = (imageContainer.offsetWidth + 1) + 'px';\r\n            // next image in the row\r\n            i = (i + 1) % imageCount;\r\n            currentWidth++;\r\n        }\r\n\r\n        i = 0;\r\n        while (currentWidth > availableRowWidth) {\r\n            const imageContainer = domRow.querySelector('.image-wrapper:nth-child(' + (i + 1) + ') .gallery-image');\r\n            imageContainer.style.width = (imageContainer.offsetWidth - 1) + 'px';\r\n            // next image in the row\r\n            i = (i + 1) % imageCount;\r\n            currentWidth--;\r\n        }\r\n    }\r\n\r\n    /* \r\n        Gets the dimenstions of the specified img.\r\n    */\r\n    getSize(img) {\r\n        return new Point(img.naturalWidth, img.naturalHeight);\r\n    }\r\n}\r\n\r\nexport default FlickrGallery; \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./app/js/modules/flickr-gallery.js\n// module id = 4\n// module chunks = 0","/* \r\nThis is a just an {x, y} container.\r\n*/\r\nclass Point {\r\n    constructor(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n}\r\n\r\nexport default Point;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./app/js/modules/point.js\n// module id = 5\n// module chunks = 0"],"sourceRoot":""}